#!/usr/bin/env python
# __author__ = 'Ted Clee'

import argparse
import os
import sys
import numpy as np
import scipy as sp
import scipy.ndimage
import matplotlib.pyplot as plt

from glob import glob
from seisflows.plugins.solver_io.fortran_binary import _read, _write
from seisflows.tools import array
import scipy.interpolate as _interp


pgmDesc = 'Unstructured 2D mesh for specFEM2d simulation, adapted for improved sampling density'

def parseArgs():
   
    # Set up the run by parsing arguments
    note = '''NOTE: The output GLL mesh is tuned for use with given frequency and velocity grid. 
    Gridded input property files must have same dimensions. 
    Currently, only "npy" input format is supported.
    '''
    ap = argparse.ArgumentParser( description='%(prog)s -- '+pgmDesc, epilog=note )

    ap.add_argument( 'outputdir', 
        help='directory for new mesh model files.')
    
    ap.add_argument('-X','--xdim', type=float,
        help='Horizontal dimension of model (meters).')
    
    ap.add_argument('-Z','--zdim', type=float,
        help='Vertical dimension of model (meters).')

    ap.add_argument('-f','--freq', type=float, 
        help='Maximum source frequency (hz).')

    ap.add_argument('-l','--limitStretch', type=float, default=2.,
        help='Maximum element stretch factor (default is 2., 1.=> no stretch).')

    ap.add_argument('-e','--elemSize', type=float,
        help='Nominal element size (m); default determined from minimum wavelength.')

    ap.add_argument('-b','--boundaryElements', type=int, default=0,
        help='Thickness (elements) of absorbing boundary layers on sides and bottom.')

    ap.add_argument('-p','--pVel',
        help='File (image or npy format) containing grid of P-velocity values (m/sec).')

    ap.add_argument('-s','--sVel',
        help='File (image or npy format) containing S-velocity values (for elastic propagation). NOT IMPLEMENTED')

    ap.add_argument('-d','--density', 
        help='File (or constant value in kg/m3) specifying density values.')

    ap.add_argument('-m','--meshPlot', action='store_true',
        help='Show plots of the generated model.')

    return ap.parse_args()

# GLL mesh indexing functions (in QuadMesh class)
# Calculations in spectral elements are made at points defined by Gauss-Lobatto-Legendre
# (GLL) coefficients. The SpecFEM2D program handles these points in a GLL-mesh array with 
# a specific arrangement of elements in the mesh and of GLL points within each element.
# The spectral elements are defined by quadrilaterals given by their 4 (z,x) vertices. 

# We treat 2D meshed models with a free surface on top and constrained boundaries at the 
# ends and bottom.  We also deal with a padded version of the model that has a number of 
# elements that form a PML (perfectly matched layer) absorbing boundary at these edges.

# The following specialized functions provide linearized indexing into the GLL mesh arrays
# for the model and padded meshes, allowing mapping from one mesh to the other for points 
# with given (z,x) coordinates given by (k,i) indices.

NGx = 5; NGz = 5 	# Number of GLL nodes within an element in each direction
NG = NGx * NGz 		# Number of GLL nodes in one element, stored in x-fastest order

class QuadMesh(object):
    ''' Unstructured 2D quadrilateral spectral element mesh
    '''
    Xdim = None 	# Mesh X-dimension, meters
    Zdim = None 	# Mesh Z-dimension, meters
    freq = None 	# Maximum frequency resolved, Hz
    limit = None 	# Maximum vertical element stretch factor
    Nex = None 		# Number of spectral elements in X direction
    Nez = None 		# Number of spectral elements in Z direction
    Nelt = None 	# Number of spectral elements (Nex X Nez)
    Xm = None 		# X-coordinates of model mesh element vertices
    Zm = None 		# Z-coordinates of model mesh element vertices
#   ('P' indicates including PML boundaries)
    nPML = None 	# Thickness (number of elements) of PML absorbing boundary
    NPex = None 	# Mesh X-elements count, including absorbing boundaries at each end
    NPez = None 	# Mesh Z-elements count, including absorbing layer at bottom
    XPm = None 		# X-coordinates of PML-extended mesh element vertices
    ZPm = None 		# Z-coordinates of PML-extended mesh element vertices

    def __init__(self, freq, limit, boundaryElements=0):
      self.freq = freq
      self.limit = limit
      self.nPML = boundaryElements
      print "QuadMesh setup: frequency %g Hz, stretch limit %g, %d PML boundary elements"%\
          (freq,limit,boundaryElements)

    def rectMesh(self, Xdim, Zdim, Nex, Nez):
      ''' Create a rectangular spectral element mesh (without interior GLL points)
      '''
      self.Xdim = Xdim
      self.Zdim = Zdim
      self.Nex = Nex
      self.Nez = Nez
      x = np.linspace(0., Xdim, Nex+1)
      z = np.linspace(-Zdim, 0., Nez+1)
      [self.Xm,self.Zm] = np.meshgrid(x, z)

      self.NPex = Nex + 2 * self.nPML
      self.NPez = Nez + self.nPML
      xP = np.linspace( -self.nPML*(Xdim/Nex), Xdim + self.nPML*(Xdim/Nex), self.NPex+1)
      zP = np.linspace( -Zdim - self.nPML*(Zdim/Nez), 0., self.NPez+1)
      [self.XPm,self.ZPm] = np.meshgrid(xP, zP)

      return (self.Zm,self.Xm)

    def gllMesh(self,pad=False):
        ''' Fill in the (optionally padded) (Z,X) mesh with GLL points
        '''
        GLLcoefs=[0.0, 0.1726732, 0.5, 0.8273268, 1.0]

        if pad:
            Ngll = (self.NPex*NGx)*(self.NPez*NGz)
            nex = self.NPex
            nez = self.NPez
            mx = self.XPm
            mz = self.ZPm
        else:
            Ngll = (self.Nex*NGx)*(self.Nez*NGz)
            nex = self.Nex
            nez = self.Nez
            mx = self.Xm
            mz = self.Zm

        mgx = np.zeros(Ngll)
        mgz = np.zeros(Ngll)
        # Set GLL point coordinates within each spectral element
        j = 0  # index thru GLL points
        for k in range(0, nez):  
          for i in range(0, nex): 
            x1 = mx[k,i]
            x2 = mx[k,i+1]
            x3 = mx[k+1,i+1]
            x4 = mx[k+1,i]
            z1 = mz[k,i]
            z2 = mz[k,i+1]
            z3 = mz[k+1,i+1]
            z4 = mz[k+1,i]
            for kg in range(0, NGz):
                xb = x1 + GLLcoefs[kg]*(x4-x1)
                xe = x2 + GLLcoefs[kg]*(x3-x2)
                zb = z1 + GLLcoefs[kg]*(z4-z1)
                ze = z2 + GLLcoefs[kg]*(z3-z2)
                for ig in range(0, NGx):
                    mgx[j] = xb + GLLcoefs[ig]*(xe-xb)
                    mgz[j] = zb + GLLcoefs[ig]*(ze-zb)
                    j += 1
        return (mgz, mgx)

    def drawQuads(self):
      ''' Draw the quadrilateral outline of each spectral element
      '''
      for i in range(0,self.Nex):
        for k in range(0,self.Nez):
          x = (self.Xm[k+1,i],self.Xm[k+1,i+1],self.Xm[k,i+1],self.Xm[k,i],self.Xm[k+1,i])
          z = (self.Zm[k+1,i],self.Zm[k+1,i+1],self.Zm[k,i+1],self.Zm[k,i],self.Zm[k+1,i])
          plt.plot(x,z,'b')

    def meshDerivZ(self, vals):
      ''' Vertical derivative of values at each mesh vertex
      '''
      dv = np.zeros( vals.shape )
      dv[1:,:] = np.diff(vals,axis=0)
      dv[0, :] = dv[1,:]
      dz = np.zeros( vals.shape )
      dz[1:,:] = -np.diff(self.Zm,axis=0)
      dz[0, :] = dz[1,:]

      return np.divide(dv,dz)

    def samplingDensityZ(self, Vp):
      ''' Vertical sampling density at each mesh vertex
      '''
      dz = np.zeros( Vp.shape )
      dz[1:,:] = np.diff(self.Zm,axis=0)
      dz[0, :] = dz[1,:]

      return NGz/self.freq * np.divide(Vp, dz)

    def adjustZ(self, Vp):
      ''' Adjust mesh Z-coordinates, 
          fining near velocity contrast, preserving sampling density
      '''
      sdMin = 5.5
      fac1 = self.limit
      fac2 = 1./fac1
      sdIn = self.samplingDensityZ( Vp )
      dVp = self.meshDerivZ( Vp )
      for i in range(0,self.Nex+1):
        # Stretch each Z-column
        dzIn = np.zeros(self.Nez+1)
        dzIn[1:] = -np.diff(self.Zm[:,i])
        dVabs = np.abs(dVp[:,i])
        dVmean = np.mean( dVabs )
        dVmax = np.max( dVabs )
        strContrast = 1. - (dVabs-dVmean) / dVmax
        strSampDens = sdIn[:,i] / sdMin
        stretch = np.clip( 0.5*(strSampDens + strContrast), fac2, fac1)
        stretch[0] = 1.
        dzStr = np.multiply(dzIn, stretch)
        totStr = np.sum( dzStr )
        adjStr = totStr / (self.Zm[0,i]-self.Zm[-1,i])
        dzStr = dzStr / adjStr
        Znew = self.Zm[0,i] - np.cumsum(dzStr)
        self.Zm[:-1,i] = Znew[:-1]
        self.ZPm[self.nPML:-1,i+self.nPML] = Znew[:-1] 	# Apply stretch in padded array also

        # Extend adjusted z-values to left and right ends
        if i==0:
          for ib in range(0,self.nPML):
            self.ZPm[self.nPML:-1,ib] = Znew[:-1]
        if i==self.Nex:
          for ib in range(1,self.nPML+1):
            self.ZPm[self.nPML:-1,-ib] = Znew[:-1]
        '''
        print 'dzIn:',dzIn
        print 'strContrast:',strContrast
        print 'strSampDens: ',strSampDens
        print 'stretch: ',stretch
        print 'dzStr:',dzStr, ' sum=',np.sum( dzStr )
        print 'Znew: ',Znew
        '''
       
    def padMesh(self,valmesh):
        ''' Extend GLL model edge values into PML boundary by constant extrapolation
        '''
        # valmesh has property values on model mesh
        Nb = self.nPML
        if Nb == 0 :
            return np.copy(valmesh)

        # Make a padded mesh
        (zgm, xgm) = qm.gllMesh(pad=True)

        # Make an extended array and fill interior with input values
        emesh = np.empty_like(xgm)
        # Copy all points in model GLL mesh into padded mesh
        for km in range(0,self.Nez):
          kp = km + Nb
          for im in range(0,self.Nex):
            mel = self.mb(km,im)
            ip = im + Nb
            pel = self.pb(kp,ip)
            for kg in range(0,NGz):
              for ig in range(0,NGx):
                lg = self.lg(kg,ig)
                emesh[pel+lg] = valmesh[mel+lg]

        # Extend left end
        imEdge = 0
        igEdge = 0
        # Loop through boundary k-values
        for km in range(0,self.Nez):
          mel = self.mb(km,imEdge)
          kp = km + Nb
          for kg in range(0,NGz):
            valEdge = valmesh[mel + self.lg(kg,igEdge)]
            for ip in range(0,Nb):
              pel = self.pb(kp,ip)
              for ig in range(0,NGx):
                lg = self.lg(kg,ig)
                emesh[pel+lg] = valEdge

        # Extend right end
        imEdge = self.Nex-1
        igEdge = NGx-1
        # Loop through boundary k-values
        for km in range(0,self.Nez):
          mel = self.mb(km,imEdge)
          kp = km + Nb
          for kg in range(0,NGz):
            valEdge = valmesh[mel + self.lg(kg,igEdge)]
            for ip in range(0,Nb):
              pel = self.pb(kp,ip+Nb+self.Nex)
              for ig in range(0,NGx):
                lg = self.lg(kg,ig)
                emesh[pel+lg] = valEdge

        # Extend bottom
        kpEdge = Nb
        kgEdge = 0
        # Loop through boundary i-values of padded mesh
        for ip in range(0,self.NPex):
          vel = self.pb(kpEdge,ip)
          for ig in range(0,NGx):
            valEdge = emesh[vel+self.lg(kgEdge,ig)]
            for kp in range(0,Nb):
              pel = self.pb(kp,ip)
              for kg in range(0,NGz):
                lg = self.lg(kg,ig)
                emesh[pel+lg] = valEdge

        return emesh

    def mb(self,km,im):
      ''' Linearized (1D) index of base point of spectral element (km,im) in MODEL mesh
      '''
      return (km*self.Nex + im) * NG

    def pb(self,kp,ip):
      ''' Linearized (1D) index of base point of spectral element (kp,ip) in PADDED mesh
      '''
      return (kp*self.NPex + ip) * NG

    def lg(self,kg,ig):
      ''' Linearized (1D) index of a GLL point (kg,ig) within a spectral element,
          relative to the base point of the element. 
      '''
      return kg*NGx + ig
    
    def modelWrite(self, model_dir, rhoMesh,vmesh,vsmesh=None):
        ''' Write 5 mesh/model files, after padding for PML boundaries
        '''
        print "QuadMesh padded model elements %d X %d"% (self.NPez,self.NPex)
 
        (zPmesh, xPmesh) = self.gllMesh(pad=True)
        _write(xPmesh, os.path.join(model_dir, "proc000000_x.bin"))
        _write(zPmesh, os.path.join(model_dir, "proc000000_z.bin"))

        zmin=np.min(zPmesh); zmax=np.max(zPmesh)
        xmin=np.min(xPmesh); xmax=np.max(xPmesh)
        print "QuadMesh padded model extents Z: (%g, %g),  X: (%g, %g)"% \
            ( zmin,zmax, xmin,xmax )

        _write(self.padMesh(rhoMesh), os.path.join(model_dir, "proc000000_rho.bin"))
        _write(self.padMesh(vmesh), os.path.join(model_dir, "proc000000_vp.bin"))
        
        if vsmesh:
            vsPmesh = self.padMesh(vsmesh)
        else:
            vsPmesh = np.zeros_like(xPmesh)
        _write(vsPmesh, os.path.join(model_dir, "proc000000_vs.bin"))

        # Write an "interfaces" file for SpecFEM2D internal mesh generation
        elSz = (xmax-xmin) / self.NPex
        intFile = open( os.path.join(model_dir,"FlatTopBotInterfaces.txt"),"w")
        intFile.write( "\
# Top and bottom interfaces used for a SpecFEM2D binary GLL mesh model. \n\
# This file defines interfaces for a single-layer 'internal mesh' model. \n\
# Model dimensions are (NZ X NX) = (%d X %d) spectral elements. \n\
# The model includes %d PML absorbing boundary layers at ends and bottom.\n\
# Nominal element size is %g meters.\n\
# Please ensure your Par_file parameters are consistent with these dimensions.\n\
# NOTE: This file was generated by the adaptiveMesher utility. \n\
#   \n\
# number of interfaces:\n\
  2 \n\
#   \n\
# For each interface, we give the number of points and then x,z for each point. \n\
#   \n\
# interface 1 (bottom of the mesh): \n\
  2 \n\
 %10g %10g \n\
 %10g %10g \n\
# interface 2 (top surface): \n\
  2 \n\
 %10g %10g \n\
 %10g %10g \n\
#   \n\
# for the one layer, the number of spectral elements in the vertical direction: \n\
 %d  \n###\n" %\
(self.NPez,self.NPex, self.nPML, elSz, xmin,zmin, xmax,zmin, xmin,zmax, xmax,zmax, self.NPez) )
        intFile.close()
    
# end class QuadMesh

if __name__ == '__main__':
    """ Unstructured 2D mesh for specFEM2d simulation, adapted for improved sampling density
    """

    args = parseArgs()
    X = args.xdim
    Z = args.zdim

    # Read velocity file(s) 
    Vpgrid = np.load(args.pVel)
    nzg = Vpgrid.shape[0]
    nxg = Vpgrid.shape[1]
    dzg = Z / (nzg-1)
    dxg = X / (nxg-1)
    '''
    # Test subset: some gridpoints each side of center
    wid = 300
    X = dxg * wid
    xctr = nxg/2 + 1
    Vpgnew = Vpgrid[:,xctr-wid/2:xctr+1+wid/2]
    Vpgrid = Vpgnew
    nzg = Vpgrid.shape[0]
    nxg = Vpgrid.shape[1]
    dzg = Z / (nzg-1)
    dxg = X / (nxg-1)
    '''
    print 'Vpgrid shape (nzg X nxg): %d X %d, size: %g X %g meters, cells (dzg X dxg): %g X %g'% \
        (nzg,nxg, Z,X, dzg,dxg)
    xg = np.linspace(0,X,nxg)
    zg = np.linspace(0,-Z,nzg)
    grid_x, grid_z = np.meshgrid( xg, zg )

    # Set element size from (assumed) slowest velocity, across top of model
    Vptop = np.mean(Vpgrid[0][:])
    SDpmin = 5.5
    if args.elemSize:
        elsize = args.elemSize
    else:
        elsize = NGLLX * Vptop / (args.freq * SDpmin)

    # number of spectral elements (xe, ze)
    Nex = int(round(X / elsize))
    Nez = int(round(Z / elsize))

    # element size in x and z
    elx = X / Nex
    elz = Z / Nez
    print 'Rectangular mesh for Freq= %g hz, Vptop= %g m/s: elements %d X %d, elz= %g, elx= %g'% \
        (args.freq, Vptop, Nez, Nex, elz,elx)

    # Smooth gridded velocities to match mesh resolution
    gwin = elz / dzg
    print 'Quad mesh Gaussian smoother sigma=',gwin
    Vpsmooth = sp.ndimage.gaussian_filter(Vpgrid, gwin, mode='nearest')

    # Show the gridded velocities
    if args.meshPlot:
        f = plt.figure()
        plt.imshow(Vpgrid, extent=[0.,X, -Z, 0.])
        plt.colorbar(orientation='vertical')
        plt.title('Vpgrid')

        f = plt.figure()
        plt.imshow(Vpsmooth, extent=[0.,X, -Z, 0.])
        plt.colorbar(orientation='vertical')
        plt.title('Vpsmooth')
        #plt.show()

    # Set up the quadrilateral mesher    
    qm = QuadMesh(args.freq, args.limitStretch, args.boundaryElements)

    (zmesh, xmesh) = qm.rectMesh(X, Z, Nex, Nez)

    vmesh = _interp.interpn( (np.flipud(zg),xg), np.flipud(Vpsmooth), (zmesh,xmesh), method='linear' )

    dVp = qm.meshDerivZ(vmesh)
    SDmesh = qm.samplingDensityZ(vmesh)

    if args.meshPlot:
        print 'Generating unadjusted plots ...'
        
        f = plt.figure(figsize=(Nex/10, Nez/10))
        qm.drawQuads()
        plt.title('Uniform spectral elements')
        plt.axis('image')
        
        f = plt.figure(figsize=(Nex/10, Nez/10))
        plt.tricontourf(xmesh.flatten(), zmesh.flatten(), vmesh.flatten(), 125, extend='both')
        plt.title('Uniform Vpmesh')
        plt.colorbar(orientation='vertical')
        plt.axis('image')
        
        f = plt.figure(figsize=(Nex/10, Nez/10))
        plt.tricontourf(xmesh.flatten(), zmesh.flatten(), dVp.flatten(), 125, extend='both')
        plt.colorbar(orientation='vertical')
        plt.title('Uniform dV/dZ')
        plt.axis('image')
        
        f = plt.figure(figsize=(Nex/10, Nez/10))
        plt.tricontourf(xmesh.flatten(), zmesh.flatten(), SDmesh.flatten(), 125, extend='both')
        plt.colorbar(orientation='vertical')
        plt.title('Unadjusted Sampling Density')
        plt.axis('image')
 
    # Adjust the mesh
    qm.adjustZ(vmesh)

    vmesh = _interp.interpn( (np.flipud(zg),xg), np.flipud(Vpsmooth), (qm.Zm,xmesh), method='linear' )

    dVp = qm.meshDerivZ(vmesh)
    SDmesh = qm.samplingDensityZ( vmesh )

    if args.meshPlot:
        print 'Generating adjusted plots ...'
        
        f = plt.figure(figsize=(Nex/10, Nez/10))
        qm.drawQuads()
        plt.title('Adjusted spectral elements')
        plt.axis('image')
        
        f = plt.figure(figsize=(Nex/10, Nez/10))
        plt.tricontourf(xmesh.flatten(), zmesh.flatten(), vmesh.flatten(), 125, extend='both')
        plt.title('Adjusted Vpmesh')
        plt.colorbar(orientation='vertical')
        plt.axis('image')
        
        f = plt.figure(figsize=(Nex/10, Nez/10))
        plt.tricontourf(xmesh.flatten(), zmesh.flatten(), dVp.flatten(), 125, extend='both')
        plt.colorbar(orientation='vertical')
        plt.title('Adjusted dV/dZ')
        plt.axis('image')
        
        f = plt.figure(figsize=(Nex/10, Nez/10))
        plt.tricontourf(xmesh.flatten(), zmesh.flatten(), SDmesh.flatten(), 125, extend='both')
        plt.colorbar(orientation='vertical')
        plt.title('Adjusted sampling Density')
        plt.axis('image')
 
        plt.show()

    # Re-smooth gridded velocities to match finer GLL mesh resolution
    gwin = elz / (NGx * dzg)
    print 'GLL mesh Gaussian smoother sigma=',gwin
    if gwin > 1.0 :
        Vpsmooth = sp.ndimage.gaussian_filter(Vpgrid, gwin, mode='nearest')
    else:
        Vpsmooth = Vpgrid
 
    # Interpolate the GLL mesh
    (zmesh, xmesh) = qm.gllMesh()

    vmesh = _interp.interpn( (np.flipud(zg),xg), np.flipud(Vpsmooth), (zmesh,xmesh), method='linear' )

    # Set the density from supplied value or filename
    try:
        rhoVal = float(args.density)
    except ValueError:
        rhoVal = None

    if rhoVal:
        # Make mesh of constant values
        rhoMesh = np.copy(vmesh)
        rhoMesh.fill(rhoVal)
    else:
        # Read, smooth, and interpolate the supplied density file
        rhoGrid = np.load(args.density)
        if gwin > 1.0 :
          rhoSmooth = sp.ndimage.gaussian_filter(rhoGrid, gwin, mode='nearest')
        else:
          rhoSmooth = rhoGrid
        rhoMesh = _interp.interpn( (np.flipud(zg),xg), np.flipud(rhoSmooth), (zmesh,xmesh), method='linear' )

    # Write the adjusted model
    model_dir = args.outputdir
    if not os.path.exists(model_dir):
        os.mkdir(model_dir)

    print "Directory for adjusted model files: ", model_dir
    vsmesh=None
    qm.modelWrite(model_dir, rhoMesh,vmesh,vsmesh)



