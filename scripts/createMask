#!/usr/bin/env python

import argparse as ap
import os
import sys
import numpy as np
import scipy as sp
import scipy.ndimage

from glob import glob
from seisflows.plugins.solver_io.fortran_binary import _read, _write
from seisflows.tools import array

pgmDesc = 'Make a mask file for spatial weighting of Seisflows inversion'

if __name__ == '__main__':
    """ Make a mask file for spatial weighting of Seisflows inversion
    """
    # Set up the run by parsing arguments
    note = '''NOTE: The output mask file is to be placed in the directory given by the Seisflows
    MASK path variable.  Mask file is applied to model file with same filename in MODEL path. 
    The --nodes parameter(s) defines a vertical weight profile w(z) as a list of (z,w) nodes,
    with weights being linearly interpolated between the given nodes.  First and last nodes 
    are extended to top and bottom of model by constant extrapolation.
    '''

    parser = ap.ArgumentParser( description='%(prog)s -- '+pgmDesc, epilog=note )
    # parser.add_argument('xcoords', help='x coordinates file')
    parser.add_argument('zcoords', help='z coordinates file')
    parser.add_argument('mask_model', help='output mask model file')
    parser.add_argument('-d','--depth', type=float, default=0.0, 
        help='depth from the top as the mask area (LEGACY parameter, DEPRECATED')
    parser.add_argument('-n','--node', type=float, nargs=2, metavar=('z','w'), action='append',  
        help='pair of z and w values for a node, repeat as needed, z in decreasing order.')

    args = parser.parse_args()
     
    # x = _read(args.xcoords)
    z = _read(args.zcoords)
    top = max(z)
    bot = min(z)
    hgt = top - bot
    
    if args.depth != 0. :
      # Mask defined by a single depth only
      zn = [top, top-args.depth, top-(args.depth+hgt*1.e-6)]
      wt = [0., 0., 1.]
    else:
      # Mask is a set of nodes
      zn = [top]
      wt = [args.node[0][1]]
      for nd in args.node:
        zn.append(nd[0])
        wt.append(nd[1])
    zn.append(bot)
    wt.append(wt[-1])

    # Convert to arrays for calculation
    znd = np.asarray(zn)
    wgt = np.asarray(wt)
    diff = znd[:-1] - znd[1:]
    print 'Node depths: ',znd
    print 'Node weights: ',wgt
    if min(diff) < 0:
        print 'ERROR: Node depths must be decreasing!'
        parser.print_help()
        sys.exit()

    # Interpolate mask(z) for every z mesh point
    mask = np.interp( z, np.flip(znd), np.flip(wgt) )

    _write(mask, args.mask_model)
    print 'DONE'
 
