#!/usr/bin/env python

import argparse
import os
import sys
import numpy as np
import scipy as sp
import scipy.ndimage

from glob import glob
from seisflows.plugins.solver_io.fortran_binary import _read, _write
from seisflows.tools import array

if __name__ == '__main__':
    """ Create an initial model based on a true model
        For usage information: createInitModel.py --help
     """

    parser = argparse.ArgumentParser()
    parser.add_argument('xcoords', help='x coordinates file')
    parser.add_argument('ycoords', help='y coordinates file')
    parser.add_argument('true_model', help='true model file')
    parser.add_argument('init_model', help='init model file')
    parser.add_argument('-s','--span', type=int, default=51, help='span value')
    parser.add_argument('-k','--keep', type=int, default=100, help='keep the top layer with a distance (default 100)  as the same as the true model')
    parser.add_argument('-c','--constant', type=int, help='set a constant value')

    args = parser.parse_args()
    x = _read(args.xcoords)
    y = _read(args.ycoords)
    top = max(y)
    mesh = np.array(list(zip(x,y)))
    init_model = _read(args.true_model)
    true_model = _read(args.true_model)
    print "model shape: ", true_model.shape
    if  args.constant is not None:
        init_model.fill(args.constant)  # set the initial model as 0
    else: 
        # Apply gaussian filter
        #sigma = [5]
        #init_model = sp.ndimage.filters.gaussian_filter(true_model, sigma, mode='constant')
        # will smooth the true model as the initial model later
        span = args.span
        print "span: ", span
        init_model = array.meshsmooth(init_model,mesh,span)
    for i in range(len(init_model)):
        if y[i] >= top - args.keep:
           init_model[i] = true_model[i] 
    _write(init_model, args.init_model)
 
