#!/usr/bin/env python2

import argparse
import os
import sys
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm

from glob import glob
from os.path import abspath, join
from seisflows.plugins.solver_io.fortran_binary import _read
from seisflows.tools.tools import exists



def parse_args():
    parser = argparse.ArgumentParser(
        description='plots SPECFEM2D model or kernels')

    # required input file arguments
    parser.add_argument('xcoords',
        help='x coordinates file')

    parser.add_argument('ycoords',
        help='y coordinates file')

    parser.add_argument('file',
        help='database file')

    # optional formatting arguments
    parser.add_argument('--cbar',
        dest='cbar',
        action='store_true',
        help='display colorbar')
    parser.set_defaults(cbar=False)

    parser.add_argument('--cmap',
        default='gist_rainbow',
        help='colormap scheme')

    parser.add_argument('--cmin', 
        type=float,
        default=None,
        help='colormap min')

    parser.add_argument('--cmax', 
        type=float,
        default=None,
        help='colormap max')

    parser.add_argument('--saturation',
        type=float,
        default=1.,
        help='colormap saturation factor')

    parser.add_argument('--symmetric',
        dest='symmetric',
        action='store_true',
        help='use symmetric color limits')
    parser.set_defaults(symmetric=False)

    parser.add_argument('--nozero',
        dest='nozero',
        action='store_true',
        help='exclude zero level')
    parser.set_defaults(nozero=False)

    parser.add_argument('--title',
        type=str,
        default='',
        help='title for plot, default is filename')

    return parser.parse_args()



if __name__ == '__main__':
    """ Plots GLL model read from SPECFEM2D Fortran binary file

        For usage information: plotgll --help
    """

    args = parse_args()

    x = _read(args.xcoords)
    y = _read(args.ycoords)
    v = _read(args.file)

    if args.title=='':
        args.title = args.file

    # Find data range and magnitude
    maxval = max(v)
    minval = min(v)

    msg = '\n%s: min, max: %f, %f'
    print msg % (args.file, minval, maxval)

    vrange = maxval - minval
    vmag = max(abs(maxval),abs(minval))
    if vmag==0. :
        print "skipping all-zero data."
        sys.exit()
    if vrange/vmag < 1.e-6 :
        print "skipping constant data."
        sys.exit()

    if args.nozero:
        minval = min( v[v>vmag*1.e-3] )
        print msg % (args.file, minval, maxval)
        vmsk = np.ma.array(v,mask=[abs(v)<vmag*1.e-3])
    else:
        vmsk = v

    # set contour limits and levels
    cmin = minval
    if args.cmin:
        cmin = args.cmin
    cmax = maxval
    if args.cmax:
        cmax = args.cmax
    nlev = 125
    clevs = np.linspace(cmin,cmax,nlev)

    # set figure size and shape
    r = (max(x) - min(x))/(max(y) - min(y))
    rx = r/np.sqrt(1 + r**2)
    ry = 1/np.sqrt(1 + r**2)

    f = plt.figure(figsize=(10*rx, 10*ry))

    # Filled contours of unstructured GLL mesh
    p = plt.tricontourf(x, y, vmsk, clevs, cmap=args.cmap, extend='both') 
    p.cmap.set_under("white")

    plt.axis('image')
    plt.title(args.title)

    # set colormap limits
    if args.cmin and args.cmax:
        assert args.cmin < args.cmax
        p.set_clim([args.cmin, args.cmax])

    if args.symmetric:
        maxabs = max(np.abs(p.get_clim()))
        clim = np.array([-maxabs, +maxabs])
        p.set_clim(clim)

    # adjust saturation
    if args.saturation:
        clim = np.array(p.get_clim())
        cavg = np.mean(clim)
        p.set_clim((clim-cavg)/args.saturation+cavg)

    # optional colorbar
    if args.cbar:
        cb = plt.colorbar(orientation='horizontal', fraction=0.1)

    plt.show()

