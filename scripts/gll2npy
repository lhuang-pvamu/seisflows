#!/usr/bin/env python

import argparse
import os
import sys
import numpy as np
import scipy.interpolate as _interp

from os.path import abspath, join
from seisflows.plugins.solver_io.fortran_binary import _read

pgmDesc = 'Convert values on unstructured 2D GLL mesh file to .npy numpy array file'

def parse_args():
    parser = argparse.ArgumentParser(
        description='%(prog)s -- '+pgmDesc)

    # required input file arguments
    parser.add_argument('xcoords',
        help='x coordinates file')

    parser.add_argument('zcoords',
        help='z coordinates file')

    parser.add_argument('values',
        help='values file, GLL format')

    # optional formatting arguments
    parser.add_argument('-d','--dxz',
        dest='dxz', type=float,
        help='grid cell size (m); default taken from model dimensions')

    return parser.parse_args()

def gll2npy(args):

    x = _read(args.xcoords)
    y = _read(args.zcoords)
    v = _read(args.values)

    minval = min(v)
    maxval = max(v)

    mesh = np.array(list(zip(x,y)))
    msg = '\n%s\nmin, max: %g, %g\n'
    print msg % (args.values, minval, maxval)
    
    nn = len(x)
    lx = max(x)-min(x)
    ly = max(y)-min(y)

    if args.dxz:
        nx = 1 + int(np.around( lx/args.dxz ))
        ny = 1 + int(np.around( ly/args.dxz ))
    else:
        nx = 1 + int(np.around(np.sqrt(nn*lx/ly)))
        ny = 1 + int(np.around(np.sqrt(nn*ly/lx)))

    print "Output array (x,z) size: %d X %d "%(nx,ny) 

    # construct structured grid
    x2 = np.linspace(x.min(), x.max(), nx)
    y2 = np.linspace(y.min(), y.max(), ny)
    X, Z = np.meshgrid(x2, y2)
    grid = np.column_stack((X.flatten(), Z.flatten()))
    # interpolate to structured grid
    V = _interp.griddata(mesh, v, grid, 'linear')

    # workaround edge issues
    #if np.any(np.isnan(V)):
    #    W = _interp.griddata(mesh, v, grid, 'nearest')
    #    for i in np.where(np.isnan(V)):
    #        V[i] = W[i]

    V = np.reshape(V,(ny, nx))
    V = np.flip(V,0)

    fbase = os.path.basename(args.values)
    fbase, fext = os.path.splitext(fbase)
    ofile = fbase+'.npy'

    np.save(ofile, V)

if __name__ == '__main__':
    """ Convert values on unstructured 2D GLL mesh file to .npy numpy array file
    """
    gll2npy( parse_args() )

