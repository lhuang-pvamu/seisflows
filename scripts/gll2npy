#!/usr/bin/env python

import argparse
import os
import sys
import numpy as np
import scipy.interpolate as _interp
#import matplotlib.pyplot as plt

from glob import glob
from os.path import abspath, join
#from seisflows.tools.graphics import plot_gll
from seisflows.plugins.solver_io.fortran_binary import _read
#from seisflows.tools.tools import exists



def parse_args():
    parser = argparse.ArgumentParser(
        description='converts SPECFEM2D model or kernels to numpy array')

    # required input file arguments
    parser.add_argument('xcoords',
        help='x coordinates file')

    parser.add_argument('ycoords',
        help='y coordinates file')

    parser.add_argument('file',
        help='database file')

#    # optional formatting arguments
#    parser.add_argument('--cbar',
#        dest='cbar',
#        action='store_true',
#        help='display colorbar')
#    parser.set_defaults(cbar=False)

#    parser.add_argument('--cmap',
#        default='seismic',
#        help='colormap scheme')

#    parser.add_argument('--cmin', 
#        type=float,
#        default=None,
#        help='colormap min')

#    parser.add_argument('--cmax', 
#        type=float,
#        default=None,
#        help='colormap max')

#    parser.add_argument('--saturation',
#        type=float,
#        default=1.,
#        help='colormap saturation factor')

#    parser.add_argument('--symmetric',
#        dest='symmetric',
#        action='store_true',
#        help='colormap symmetry flag')
#    parser.set_defaults(symmetric=False)

#    parser.add_argument('--title',
#        type=str,
#        default='',
#        help='title')

    return parser.parse_args()

def gll2npy(xcoords, ycoords, filename):

    x = _read(xcoords)
    y = _read(ycoords)
    v = _read(filename)

    minval = min(v)
    maxval = max(v)

    mesh = np.array(list(zip(x,y)))
    msg = '\n%s\nmin, max: %f, %f\n'
    print msg % (filename, minval, maxval)

    #SSx = (x[25]-x[0])/5.0
    #SSy = y[5]-y[0]
    
    nn = len(x)
    lx = max(x)-min(x)
    ly = max(y)-min(y)

    nx = int(np.around(np.sqrt(nn*lx/ly)))
    ny = int(np.around(np.sqrt(nn*ly/lx)))

    print "Size = " + str(nx) + ", " + str(ny)

    # construct structured grid
    x2 = np.linspace(x.min(), x.max(), nx)
    y2 = np.linspace(y.min(), y.max(), ny)
    X, Z = np.meshgrid(x2, y2)
    grid = np.column_stack((X.flatten(), Z.flatten()))
    # interpolate to structured grid
    V = _interp.griddata(mesh, v, grid, 'linear')

    # workaround edge issues
    #if np.any(np.isnan(V)):
    #    W = _interp.griddata(mesh, v, grid, 'nearest')
    #    for i in np.where(np.isnan(V)):
    #        V[i] = W[i]

    V = np.reshape(V,(ny, nx))
    V = np.flip(V,0)

    new_name = filename+ ".npy"
    np.save(new_name, V)

if __name__ == '__main__':
    """ Converts GLL model read from SPECFEM2D Fortran binary file to numpy array

        For usage information: writegll --help
    """

    args = parse_args()

    gll2npy(args.xcoords, args.ycoords, args.file)
